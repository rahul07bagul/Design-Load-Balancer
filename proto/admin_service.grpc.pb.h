// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/admin_service.proto
#ifndef GRPC_proto_2fadmin_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fadmin_5fservice_2eproto__INCLUDED

#include "proto/admin_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace admin {

// We can reuse or define new messages if you prefer
//
// The Admin service interface
class AdminService final {
 public:
  static constexpr char const* service_full_name() {
    return "admin.AdminService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return the full list of servers (host, port, healthy, etc.)
    virtual ::grpc::Status ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::ListServersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>> AsyncListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>>(AsyncListServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>> PrepareAsyncListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>>(PrepareAsyncListServersRaw(context, request, cq));
    }
    // Update the health status of a server
    virtual ::grpc::Status UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUpdateServerHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUpdateServerHealthRaw(context, request, cq));
    }
    // Request that the LB create a new server
    virtual ::grpc::Status AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::AddServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>> AsyncAddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>>(AsyncAddServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>> PrepareAsyncAddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>>(PrepareAsyncAddServerRaw(context, request, cq));
    }
    // Request that the LB remove a specific server
    virtual ::grpc::Status RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRemoveServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRemoveServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return the full list of servers (host, port, healthy, etc.)
      virtual void ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update the health status of a server
      virtual void UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request that the LB create a new server
      virtual void AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request that the LB remove a specific server
      virtual void RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>* AsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admin::ListServersResponse>* PrepareAsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>* AsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admin::AddServerResponse>* PrepareAsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::ListServersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>> AsyncListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>>(AsyncListServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>> PrepareAsyncListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>>(PrepareAsyncListServersRaw(context, request, cq));
    }
    ::grpc::Status UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUpdateServerHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUpdateServerHealthRaw(context, request, cq));
    }
    ::grpc::Status AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::AddServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>> AsyncAddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>>(AsyncAddServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>> PrepareAsyncAddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>>(PrepareAsyncAddServerRaw(context, request, cq));
    }
    ::grpc::Status RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRemoveServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRemoveServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, std::function<void(::grpc::Status)>) override;
      void AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>* AsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>* PrepareAsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>* AsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>* PrepareAsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListServers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateServerHealth_;
    const ::grpc::internal::RpcMethod rpcmethod_AddServer_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return the full list of servers (host, port, healthy, etc.)
    virtual ::grpc::Status ListServers(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response);
    // Update the health status of a server
    virtual ::grpc::Status UpdateServerHealth(::grpc::ServerContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response);
    // Request that the LB create a new server
    virtual ::grpc::Status AddServer(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response);
    // Request that the LB remove a specific server
    virtual ::grpc::Status RemoveServer(::grpc::ServerContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListServers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServers(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::admin::ListServersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServerHealth(::grpc::ServerContext* context, ::admin::UpdateServerHealthRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddServer(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::admin::AddServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveServer(::grpc::ServerContext* context, ::admin::RemoveServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListServers<WithAsyncMethod_UpdateServerHealth<WithAsyncMethod_AddServer<WithAsyncMethod_RemoveServer<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListServers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::admin::ListServersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response) { return this->ListServers(context, request, response); }));}
    void SetMessageAllocatorFor_ListServers(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::admin::ListServersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::admin::ListServersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListServers(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::admin::UpdateServerHealthRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::admin::UpdateServerHealthRequest* request, ::google::protobuf::Empty* response) { return this->UpdateServerHealth(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateServerHealth(
        ::grpc::MessageAllocator< ::admin::UpdateServerHealthRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::admin::UpdateServerHealthRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateServerHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::admin::AddServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response) { return this->AddServer(context, request, response); }));}
    void SetMessageAllocatorFor_AddServer(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::admin::AddServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::admin::AddServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddServer(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::admin::RemoveServerRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response) { return this->RemoveServer(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveServer(
        ::grpc::MessageAllocator< ::admin::RemoveServerRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::admin::RemoveServerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveServer(
      ::grpc::CallbackServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListServers<WithCallbackMethod_UpdateServerHealth<WithCallbackMethod_AddServer<WithCallbackMethod_RemoveServer<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListServers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListServers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServerHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListServers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListServers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListServers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateServerHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateServerHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListServers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::admin::ListServersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::admin::ListServersResponse>* streamer) {
                       return this->StreamedListServers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServers(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::ListServersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::admin::ListServersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateServerHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateServerHealth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::admin::UpdateServerHealthRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::admin::UpdateServerHealthRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUpdateServerHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateServerHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateServerHealth(::grpc::ServerContext* /*context*/, const ::admin::UpdateServerHealthRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateServerHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::admin::UpdateServerHealthRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::admin::AddServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::admin::AddServerResponse>* streamer) {
                       return this->StreamedAddServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::admin::AddServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::admin::AddServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::admin::RemoveServerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::admin::RemoveServerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedRemoveServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveServer(::grpc::ServerContext* /*context*/, const ::admin::RemoveServerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::admin::RemoveServerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListServers<WithStreamedUnaryMethod_UpdateServerHealth<WithStreamedUnaryMethod_AddServer<WithStreamedUnaryMethod_RemoveServer<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListServers<WithStreamedUnaryMethod_UpdateServerHealth<WithStreamedUnaryMethod_AddServer<WithStreamedUnaryMethod_RemoveServer<Service > > > > StreamedService;
};

}  // namespace admin


#endif  // GRPC_proto_2fadmin_5fservice_2eproto__INCLUDED
