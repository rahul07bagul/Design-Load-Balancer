// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/admin_service.proto

#include "proto/admin_service.pb.h"
#include "proto/admin_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace admin {

static const char* AdminService_method_names[] = {
  "/admin.AdminService/ListServers",
  "/admin.AdminService/UpdateServerHealth",
  "/admin.AdminService/AddServer",
  "/admin.AdminService/RemoveServer",
  "/admin.AdminService/GetMetrics",
  "/admin.AdminService/GetServerConstraints",
};

std::unique_ptr< AdminService::Stub> AdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminService::Stub> stub(new AdminService::Stub(channel, options));
  return stub;
}

AdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListServers_(AdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateServerHealth_(AdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddServer_(AdminService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveServer_(AdminService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetrics_(AdminService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerConstraints_(AdminService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminService::Stub::ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::ListServersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::admin::ListServersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListServers_, context, request, response);
}

void AdminService::Stub::async::ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::admin::ListServersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListServers_, context, request, response, std::move(f));
}

void AdminService::Stub::async::ListServers(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListServers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>* AdminService::Stub::PrepareAsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::admin::ListServersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListServers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::admin::ListServersResponse>* AdminService::Stub::AsyncListServersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListServersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequests& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::admin::UpdateServerHealthRequests, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateServerHealth_, context, request, response);
}

void AdminService::Stub::async::UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequests* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::admin::UpdateServerHealthRequests, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateServerHealth_, context, request, response, std::move(f));
}

void AdminService::Stub::async::UpdateServerHealth(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequests* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateServerHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AdminService::Stub::PrepareAsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequests& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::admin::UpdateServerHealthRequests, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateServerHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AdminService::Stub::AsyncUpdateServerHealthRaw(::grpc::ClientContext* context, const ::admin::UpdateServerHealthRequests& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateServerHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::AddServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::admin::AddServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddServer_, context, request, response);
}

void AdminService::Stub::async::AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::admin::AddServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddServer_, context, request, response, std::move(f));
}

void AdminService::Stub::async::AddServer(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>* AdminService::Stub::PrepareAsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::admin::AddServerResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::admin::AddServerResponse>* AdminService::Stub::AsyncAddServerRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::admin::RemoveServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveServer_, context, request, response);
}

void AdminService::Stub::async::RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::admin::RemoveServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveServer_, context, request, response, std::move(f));
}

void AdminService::Stub::async::RemoveServer(::grpc::ClientContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AdminService::Stub::PrepareAsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::admin::RemoveServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AdminService::Stub::AsyncRemoveServerRaw(::grpc::ClientContext* context, const ::admin::RemoveServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::GetMetrics(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::MetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::admin::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMetrics_, context, request, response);
}

void AdminService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::MetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::admin::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void AdminService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::MetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::admin::MetricsResponse>* AdminService::Stub::PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::admin::MetricsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::admin::MetricsResponse>* AdminService::Stub::AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdminService::Stub::GetServerConstraints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::admin::ServerConstraintsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::admin::ServerConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerConstraints_, context, request, response);
}

void AdminService::Stub::async::GetServerConstraints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ServerConstraintsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::admin::ServerConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerConstraints_, context, request, response, std::move(f));
}

void AdminService::Stub::async::GetServerConstraints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::admin::ServerConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerConstraints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::admin::ServerConstraintsResponse>* AdminService::Stub::PrepareAsyncGetServerConstraintsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::admin::ServerConstraintsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerConstraints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::admin::ServerConstraintsResponse>* AdminService::Stub::AsyncGetServerConstraintsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerConstraintsRaw(context, request, cq);
  result->StartCall();
  return result;
}

AdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::google::protobuf::Empty, ::admin::ListServersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::admin::ListServersResponse* resp) {
               return service->ListServers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::admin::UpdateServerHealthRequests, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::admin::UpdateServerHealthRequests* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateServerHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::google::protobuf::Empty, ::admin::AddServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::admin::AddServerResponse* resp) {
               return service->AddServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::admin::RemoveServerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::admin::RemoveServerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->RemoveServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::google::protobuf::Empty, ::admin::MetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::admin::MetricsResponse* resp) {
               return service->GetMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::google::protobuf::Empty, ::admin::ServerConstraintsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::admin::ServerConstraintsResponse* resp) {
               return service->GetServerConstraints(ctx, req, resp);
             }, this)));
}

AdminService::Service::~Service() {
}

::grpc::Status AdminService::Service::ListServers(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::ListServersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateServerHealth(::grpc::ServerContext* context, const ::admin::UpdateServerHealthRequests* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::AddServer(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::AddServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::RemoveServer(::grpc::ServerContext* context, const ::admin::RemoveServerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetMetrics(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::MetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetServerConstraints(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::admin::ServerConstraintsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace admin

